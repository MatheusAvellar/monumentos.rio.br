---
layout: default.ejs
title: Mapa — Monumentos Rio
---

<%_ const monuments = collections.all.filter(file => file.filePathStem.startsWith("/id/"));
monuments.sort((a, b) => a.filePathStem.slice(4).localeCompare(b.filePathStem.slice(4)));
const monument_count = monuments.length;

function countCategory(cat) {
	const count = monuments.reduce((acc, file) => acc + (file.data.categoria === cat), 0);
	return count + " ite" + (count < 2 ? "m" : "ns");
}
%>
<main>
	<h1>Mapa dos monumentos</h1>
	<p>
		<strong>Filtros:</strong>
	</p>
	<section class="control-panel">
		<section class="inputs">
			<label>
				<input checked data-cat="obra" type="checkbox">
				<span>
					<strong>Obras públicas</strong><br>
					<%- makeTag("obra", false) %>
					<small>(<%= countCategory("obra") %>)</small>
				</span>
			</label>
			<label>
				<input checked data-cat="busto" type="checkbox">
				<span>
					<strong>Bustos e efígies</strong><br>
					<%- makeTag("busto", false) %>
					<small>(<%= countCategory("busto") %>)</small>
				</span>
			</label>
			<label>
				<input checked data-cat="chafariz" type="checkbox">
				<span>
					<strong>Chafarizes e fontes</strong><br>
					<%- makeTag("chafariz", false) %>
					<small>(<%= countCategory("chafariz") %>)</small>
				</span>
			</label>
			<label>
				<input checked data-cat="estatua" type="checkbox">
				<span>
					<strong>Estátuas</strong><br>
					<%- makeTag("estátua", false) %>
					<small>(<%= countCategory("estátua") %>)</small>
				</span>
			</label>
			<label>
				<input checked data-cat="marco" type="checkbox">
				<span>
					<strong>Marcos</strong><br>
					<%- makeTag("marco", false) %>
					<small>(<%= countCategory("marco") %>)</small>
				</span>
			</label>
			<label>
				<input checked data-cat="escultura" type="checkbox">
				<span>
					<strong>Esculturas</strong><br>
					<%- makeTag("escultura", false) %>
					<small>(<%= countCategory("escultura") %>)</small>
				</span>
			</label>
		</section>
		<section class="selections">
			<button id="select-all">Selecionar todos</button>
			<button id="deselect-all">Remover todos</button>
		</section>
	</section>
	<div id="monument-location-map" class="big"></div>
	<!-- [Ref] https://leafletjs.com/ -->
	<link href="/assets/leaflet/leaflet.css" rel="stylesheet" type="text/css">
	<script src="/assets/leaflet/leaflet.1.9.3.min.js"></script>
	<!-- [Ref] https://github.com/mourner/rbush -->
	<script src="/assets/leaflet/rbush.2.0.1.min.js"></script>
	<script>window.RBush = rbush;</script>
	<!-- [Ref] https://github.com/francoisromain/leaflet-markers-canvas -->
	<script src="/assets/leaflet/leaflet-markers-canvas.2023-05-29.min.js"></script>
	<script>
const map = L.map("monument-location-map", {
	center: [-22.9, -43.4],
	zoom: 11,
	maxBounds: new L.LatLngBounds(
		new L.LatLng(-22.9 - 0.5, -43.4 - 0.8),
		new L.LatLng(-22.9 + 0.5, -43.4 + 0.8)
	),
	maxBoundsViscosity: .75
});

L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
	minZoom: 10,
	maxZoom: 19,
	preferCanvas: true,
	attribution: "&copy; <a href='http://www.openstreetmap.org/copyright'>OSM</a>"
}).addTo(map);

const markersMap = new Map();
markersMap.set("busto",     { lock: !1, list: [], canvas: new L.MarkersCanvas(), icon: L.icon(makeMarker("<%= catCleanup("busto")     %>")) } );
markersMap.set("chafariz",  { lock: !1, list: [], canvas: new L.MarkersCanvas(), icon: L.icon(makeMarker("<%= catCleanup("chafariz")  %>")) } );
markersMap.set("estátua",   { lock: !1, list: [], canvas: new L.MarkersCanvas(), icon: L.icon(makeMarker("<%= catCleanup("estátua")   %>")) } );
markersMap.set("marco",     { lock: !1, list: [], canvas: new L.MarkersCanvas(), icon: L.icon(makeMarker("<%= catCleanup("marco")     %>")) } );
markersMap.set("escultura", { lock: !1, list: [], canvas: new L.MarkersCanvas(), icon: L.icon(makeMarker("<%= catCleanup("escultura") %>")) } );
markersMap.set("obra",      { lock: !1, list: [], canvas: new L.MarkersCanvas(), icon: L.icon(makeMarker("<%= catCleanup("obra")      %>")) } );

for(const [key, obj] of [...markersMap]) {
	obj.canvas.addTo(map);
	// Seems to need a call to clear() before everything, otherwise it somehow
	// makes every MarkersCanvas() instance reference the same RBush() tree
	obj.canvas.clear();
	obj.canvas._canvas.classList.add(`leaflet-canvas-${removeDiacritics(key)}`);
	// Add a 100ms rate-limited event listener for `move` event
	// so markers don't have to wait for `moveend` to update
	map.on("move", function(evt) {
		if(obj.lock) return;
		obj.lock = true;
		console.log(key);
		obj.canvas._reset();
		setTimeout(function() { obj.lock = false; }, 100);
	}, obj.canvas);
}

function removeDiacritics(c) { return (c == "estátua") ? "estatua" : c; }
function readdDiacritics(c) { return (c == "estatua") ? "estátua" : c; }

function toggleMarkers(cat, state) {
	const markers = [...document.querySelectorAll(`.leaflet-container .leaflet-markers-canvas-layer.leaflet-canvas-${cat}`)];
	markers.forEach(m => {
		const canvas = markersMap.get(readdDiacritics(cat)).canvas;
		if(!state) {
			m.classList.add("hidden-markers");
			map.off("click", canvas._fire, canvas);
			map.off("mousemove", canvas._fire, canvas);
		} else {
			m.classList.remove("hidden-markers");
			map.on("click", canvas._fire, canvas);
			map.on("mousemove", canvas._fire, canvas);
		}
	});
}
[...document.querySelectorAll(".control-panel input[type='checkbox']")].forEach(input => {
	input.addEventListener("click", evt => {
		toggleMarkers(input.dataset.cat, input.checked);
	});
});
document.getElementById("select-all").addEventListener("click", function() {
	[...document.querySelectorAll(".control-panel input[type='checkbox']")].forEach(input => {
		if(!input.checked) input.click();
	});
});
document.getElementById("deselect-all").addEventListener("click", function() {
	[...document.querySelectorAll(".control-panel input[type='checkbox']")].forEach(input => {
		if(input.checked) input.click();
	});
});

function makeMarker(cat) {
	return {
		iconUrl: `<%= MARKER_PATH %>/phosphor-marker--${cat}.svg`,
		iconSize: [32, 32],
		iconAnchor: [16, 32]
	};
}

function generatePopup(id, name, data, bairro, extra) {
	return `<a href="/id/${id}"><strong>${name}</strong></a><br>
<span class="identifier">${id}</span> &middot; <span>${data}</span><br>
<span class="neighborhood">${bairro}</span><br>${extra}`;
}
const allMarkers = [];
function markerOnClick(e) { this.openPopup(); }
<%_ for(let i = 0; i < monument_count; i++) {
	const lat = monuments[i].data.lat;
	const lon = monuments[i].data.lon;
	const ID = getIDFromPath(monuments[i].filePathStem); %>
const m<%=i%> = L.marker([<%= lat %>, <%= lon %>], { icon: markersMap.get("<%= monuments[i].data.categoria %>").icon });
m<%=i%>.bindPopup(generatePopup("<%= ID %>", "<%= monuments[i].data.name %>", "<%= (monuments[i].data.data_circa ? 'c.' : '') + getYearFromDate(monuments[i].data.data_inaug) %>", "<%= monuments[i].data.bairro %>", '<%- makeTag(monuments[i].data.categoria) %>'), { offset: [0, -24] }).openPopup().on({ click: markerOnClick });
markersMap.get("<%= monuments[i].data.categoria %>").list.push(m<%=i%>); <%_ } %>

for(const [key, obj] of [...markersMap]) {
	obj.canvas.addMarkers(obj.list);
}
	</script>
	<style>
.control-panel {
	margin-bottom: 1rem;
}
.control-panel > .inputs {
	display: flex;
	flex-wrap: wrap;
	gap: .5rem;
	margin-bottom: .5rem;
}
.control-panel > .inputs > label {
	padding: .5rem;
	border: 1px solid #dfdfdf;
	border: 1px solid var(--highlight, #dfdfdf);
	background-color: var(--bg-alt, #fff);
	border-radius: 4px;
}
.control-panel > .inputs > label:has(> input:checked) {
	background-color: rgba(141,183,255, .25);
	border-color: #93baff;
}
.control-panel > .selections {
	text-align: right;
}
.control-panel button {
	font: inherit;
	font-size: 75%;
	border: 2px solid #444;
	border: 2px solid var(--text-alt-color, #444);
	color: #444;
	color: var(--text-alt-color, #444);
	font-weight: 500;
	border-radius: 50px;
	padding: .5rem 1rem;
	background-color: #fff;
	background-color: var(--bg-alt, #fff);
	cursor: pointer;
}
.control-panel button:is(:hover, :focus) {
	background-color: #efefef;
	background-color: var(--soft-highlight, #efefef);
	color: #000;
	color: var(--text-color, #000);
}
.control-panel button:active {
	background-color: #444;
	background-color: var(--text-alt-color, #444);
	color: #fff;
	color: var(--bg-alt, #fff);
}

#monument-location-map .hidden-markers {
	display: none;
}

.leaflet-zoom-anim .leaflet-zoom-animated {
	transition: .15s;
}
	</style>
</main>
